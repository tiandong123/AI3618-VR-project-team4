//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Samples/XR Interaction Toolkit/2.5.4/XR Device Simulator/Myinputactions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Myinputactions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Myinputactions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Myinputactions"",
    ""maps"": [
        {
            ""name"": ""basic"",
            ""id"": ""8e1a3e4f-836d-4f7b-b466-0ca78e0f074c"",
            ""actions"": [
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""66763e26-29d2-4f78-abd5-093cbb75732c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveX"",
                    ""type"": ""Button"",
                    ""id"": ""dd97694f-dd90-4882-9f76-97c49e7bc6b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveZ"",
                    ""type"": ""Button"",
                    ""id"": ""054664b7-4c42-4bb1-8a25-a80964e1f115"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""uidisplay"",
                    ""type"": ""Button"",
                    ""id"": ""c65124a8-a2a4-4a86-ac11-3ff66278ce02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""interact_door"",
                    ""type"": ""Button"",
                    ""id"": ""ebd854db-f322-4203-beae-1c9a65cf1411"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""836cfaf5-aee5-4e3d-a882-7e094a6c2134"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddff9ca7-5961-4c61-968a-038df105844d"",
                    ""path"": ""<Keyboard>/#(])"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""999a1f9d-2e43-47e5-b448-52abf87490dc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ef3884cd-2c4e-442c-99fe-ac32480d2efe"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4a6f4d62-a3ca-4f14-b2ab-48bf2d55c175"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c6368faf-561f-4693-8c14-b04557d9c926"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveZ"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3941b067-af64-440b-b86b-b64dcd7dbcee"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3ceace2f-449e-4980-88f2-fc4f9a7db258"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""102b0c77-2e16-4baf-ab43-8eda63e0ba32"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""uidisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b132738-c48d-4752-9e7b-45fccd299fd7"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interact_door"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""hook"",
            ""id"": ""c7d534aa-a900-469e-a426-7426838df17d"",
            ""actions"": [
                {
                    ""name"": ""hookmove"",
                    ""type"": ""Value"",
                    ""id"": ""7d536a9a-af4a-4be5-b63b-1a8c71c981ee"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""hook"",
                    ""type"": ""Button"",
                    ""id"": ""d0b73e97-6421-49c5-a51b-a80f76459e40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""3771f5cb-d612-4e8c-9159-c7fa4afdb70a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cd20c8ab-ce66-4492-9726-9b0fe4d664eb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hookmove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8b1bb594-e874-4b3b-bf54-87e0b59edb7b"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hookmove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8cf70163-d9d7-4948-bee1-b4f5f84667e5"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hookmove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a4f5bbab-f5f0-4307-9a32-89265bd91fb1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""230c8e58-8830-409d-a0c2-2d1e63394ea6"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // basic
        m_basic = asset.FindActionMap("basic", throwIfNotFound: true);
        m_basic_jump = m_basic.FindAction("jump", throwIfNotFound: true);
        m_basic_MoveX = m_basic.FindAction("MoveX", throwIfNotFound: true);
        m_basic_MoveZ = m_basic.FindAction("MoveZ", throwIfNotFound: true);
        m_basic_uidisplay = m_basic.FindAction("uidisplay", throwIfNotFound: true);
        m_basic_interact_door = m_basic.FindAction("interact_door", throwIfNotFound: true);
        // hook
        m_hook = asset.FindActionMap("hook", throwIfNotFound: true);
        m_hook_hookmove = m_hook.FindAction("hookmove", throwIfNotFound: true);
        m_hook_hook = m_hook.FindAction("hook", throwIfNotFound: true);
        m_hook_shoot = m_hook.FindAction("shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // basic
    private readonly InputActionMap m_basic;
    private List<IBasicActions> m_BasicActionsCallbackInterfaces = new List<IBasicActions>();
    private readonly InputAction m_basic_jump;
    private readonly InputAction m_basic_MoveX;
    private readonly InputAction m_basic_MoveZ;
    private readonly InputAction m_basic_uidisplay;
    private readonly InputAction m_basic_interact_door;
    public struct BasicActions
    {
        private @Myinputactions m_Wrapper;
        public BasicActions(@Myinputactions wrapper) { m_Wrapper = wrapper; }
        public InputAction @jump => m_Wrapper.m_basic_jump;
        public InputAction @MoveX => m_Wrapper.m_basic_MoveX;
        public InputAction @MoveZ => m_Wrapper.m_basic_MoveZ;
        public InputAction @uidisplay => m_Wrapper.m_basic_uidisplay;
        public InputAction @interact_door => m_Wrapper.m_basic_interact_door;
        public InputActionMap Get() { return m_Wrapper.m_basic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicActions set) { return set.Get(); }
        public void AddCallbacks(IBasicActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicActionsCallbackInterfaces.Add(instance);
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @MoveX.started += instance.OnMoveX;
            @MoveX.performed += instance.OnMoveX;
            @MoveX.canceled += instance.OnMoveX;
            @MoveZ.started += instance.OnMoveZ;
            @MoveZ.performed += instance.OnMoveZ;
            @MoveZ.canceled += instance.OnMoveZ;
            @uidisplay.started += instance.OnUidisplay;
            @uidisplay.performed += instance.OnUidisplay;
            @uidisplay.canceled += instance.OnUidisplay;
            @interact_door.started += instance.OnInteract_door;
            @interact_door.performed += instance.OnInteract_door;
            @interact_door.canceled += instance.OnInteract_door;
        }

        private void UnregisterCallbacks(IBasicActions instance)
        {
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @MoveX.started -= instance.OnMoveX;
            @MoveX.performed -= instance.OnMoveX;
            @MoveX.canceled -= instance.OnMoveX;
            @MoveZ.started -= instance.OnMoveZ;
            @MoveZ.performed -= instance.OnMoveZ;
            @MoveZ.canceled -= instance.OnMoveZ;
            @uidisplay.started -= instance.OnUidisplay;
            @uidisplay.performed -= instance.OnUidisplay;
            @uidisplay.canceled -= instance.OnUidisplay;
            @interact_door.started -= instance.OnInteract_door;
            @interact_door.performed -= instance.OnInteract_door;
            @interact_door.canceled -= instance.OnInteract_door;
        }

        public void RemoveCallbacks(IBasicActions instance)
        {
            if (m_Wrapper.m_BasicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicActions @basic => new BasicActions(this);

    // hook
    private readonly InputActionMap m_hook;
    private List<IHookActions> m_HookActionsCallbackInterfaces = new List<IHookActions>();
    private readonly InputAction m_hook_hookmove;
    private readonly InputAction m_hook_hook;
    private readonly InputAction m_hook_shoot;
    public struct HookActions
    {
        private @Myinputactions m_Wrapper;
        public HookActions(@Myinputactions wrapper) { m_Wrapper = wrapper; }
        public InputAction @hookmove => m_Wrapper.m_hook_hookmove;
        public InputAction @hook => m_Wrapper.m_hook_hook;
        public InputAction @shoot => m_Wrapper.m_hook_shoot;
        public InputActionMap Get() { return m_Wrapper.m_hook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HookActions set) { return set.Get(); }
        public void AddCallbacks(IHookActions instance)
        {
            if (instance == null || m_Wrapper.m_HookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HookActionsCallbackInterfaces.Add(instance);
            @hookmove.started += instance.OnHookmove;
            @hookmove.performed += instance.OnHookmove;
            @hookmove.canceled += instance.OnHookmove;
            @hook.started += instance.OnHook;
            @hook.performed += instance.OnHook;
            @hook.canceled += instance.OnHook;
            @shoot.started += instance.OnShoot;
            @shoot.performed += instance.OnShoot;
            @shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IHookActions instance)
        {
            @hookmove.started -= instance.OnHookmove;
            @hookmove.performed -= instance.OnHookmove;
            @hookmove.canceled -= instance.OnHookmove;
            @hook.started -= instance.OnHook;
            @hook.performed -= instance.OnHook;
            @hook.canceled -= instance.OnHook;
            @shoot.started -= instance.OnShoot;
            @shoot.performed -= instance.OnShoot;
            @shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IHookActions instance)
        {
            if (m_Wrapper.m_HookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHookActions instance)
        {
            foreach (var item in m_Wrapper.m_HookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HookActions @hook => new HookActions(this);
    public interface IBasicActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMoveX(InputAction.CallbackContext context);
        void OnMoveZ(InputAction.CallbackContext context);
        void OnUidisplay(InputAction.CallbackContext context);
        void OnInteract_door(InputAction.CallbackContext context);
    }
    public interface IHookActions
    {
        void OnHookmove(InputAction.CallbackContext context);
        void OnHook(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
